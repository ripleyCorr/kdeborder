% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kdeborder.R
\name{plot_sKDE}
\alias{plot_sKDE}
\title{Using the result obtained by the evaluation of the functions sKDE() or sKDE_without_c(),
the function plot_sKDE() creates a visualization of the kernel density estimates.}
\usage{
plot_sKDE(smooth, breaks, polygon, coord, alpha_coords = 0.8,
  size_coords = 0.8, many_points = FALSE, colContour = "white",
  colPoints = "dodger blue", title, contour = TRUE, round = 2,
  text_size = 22)
}
\arguments{
\item{smooth}{result from sKDE() or sKDE_without_c();}

\item{breaks}{breaks for the legend (seq(min(smooth$Z)*.95,max(smooth$Z)*1.05,length=21) by default);}

\item{polygon}{polygon on which data points lie;}

\item{coord}{coordinates (long, lat) of data points;}

\item{alpha_coords}{transparency for data points (.8 by default);}

\item{size_coords}{size for data points (.8 by default);}

\item{many_points}{if TRUE, @coord must be the result of condense() (package bigvis). It is helpful when there are too many points to display (FALSE by default);}

\item{colContour}{colour of the contour of the polygon ("white" by default);}

\item{colPoints}{colour of the data points ("dodger blue" by default);}

\item{title}{title (if provided) to give to the plot;}

\item{contour}{if FALSE, contour are not plotted (TRUE by default);}

\item{round}{round value for the legend (2 by default);}

\item{text_size}{text size (22 by default).}
}
\value{
a ggplot2 plot.
}
\description{
Using the result obtained by the evaluation of the functions sKDE() or sKDE_without_c(),
the function plot_sKDE() creates a visualization of the kernel density estimates.
}
\examples{
data(acci)
# Estimation with correction
smoothed_fin <- sKDE(U = acci$finistere$points, polygon = acci$finistere$polygon,
    optimal=TRUE, parallel = FALSE)
# Estimation without correction
    smoothed_fin_nc <- sKDE_without_c(U = acci$finistere$points, polygon = acci$finistere$polygon,
    optimal=TRUE)
p_acci_fin <- plot_sKDE(smooth = smoothed_fin,
    coord = acci$finistere$points,
    alpha_coords = .8,
    size_coords = 1,
    breaks = seq(min(smoothed_fin$ZNA, smoothed_fin_nc$ZNA,na.rm=T)*.95,
    max(smoothed_fin$ZNA, smoothed_fin_nc$ZNA,na.rm=T)*1.05, length=21),
    polygon = acci$finistere$polygon, round = 3, colContour = "black") +
ggtitle("With correction") +
coord_equal()
print(p_acci_fin)
}
